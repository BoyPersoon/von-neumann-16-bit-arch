
/**
 * The ALU (Arithmetic Logic Unit).
 * Computes one of the following functions:
 * x+y, x-y, y-x, 0, 1, -1, x, y, -x, -y, !x, !y,
 * x+1, y+1, x-1, y-1, x&y, x|y on two 16-bit inputs, 
 * according to 6 input bits denoted zx,nx,zy,ny,f,no.
 * In addition, the ALU computes two 1-bit outputs:
 * if the ALU output == 0, zr is set to 1; otherwise zr is set to 0;
 * if the ALU output < 0, ng is set to 1; otherwise ng is set to 0.
 */

// Implementation: the ALU logic manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) set x = 0        // 16-bit constant
// if (nx == 1) set x = !x       // bitwise not
// if (zy == 1) set y = 0        // 16-bit constant
// if (ny == 1) set y = !y       // bitwise not
// if (f == 1)  set out = x + y  // integer 2's complement addition
// if (f == 0)  set out = x & y  // bitwise and
// if (no == 1) set out = !out   // bitwise not
// if (out == 0) set zr = 1
// if (out < 0) set ng = 1

CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute out = x + y (if 1) or x & y (if 0)
        no; // negate the out output?

    OUT 
        out[16], // 16-bit output
        zr, // 1 if (out == 0), 0 otherwise
        ng; // 1 if (out < 0),  0 otherwise

    PARTS:
    
    Mux16(a=x, sel=zx, out=ox0);           // select zeroing x
    Not16(in=ox0, out=onx);
    Mux16(a=ox0, b=onx, sel=nx, out=ox1);  // select negating x

    Mux16(a=y, sel=zy, out=oy0);           // select zeroing y
    Not16(in=oy0, out=ony);
    Mux16(a=oy0, b=ony, sel=ny, out=oy1);  // select negating y

    Add16(a=ox1, b=oy1, out=addxy);
    And16(a=ox1, b=oy1, out=andxy);
    Mux16(a=andxy, b=addxy, sel=f, out=oxy0); // select addition or and

    Not16(in=oxy0, out=onxy);

    Mux16(a=oxy0, b=onxy, sel=no, out[0..14]=rest, out[15]=msb); // seperate msb
    And(a=msb, b=msb, out=ng); // ng == 1 if the output is negative

    Mux16(a=oxy0, b=onxy, sel=no, out[0..7]=lp, out[8..15]=rp); // split in two
    Or8Way(in=lp, out=nzr1);
    Or8Way(in=rp, out=nzr2);
    Or(a=nzr1, b=nzr2, out=nzr);
    Not(in=nzr, out=zr);

    Mux16(a=oxy0, b=onxy, sel=no, out=out); // negate if (no == 1)
}