
/**
 * The complete address space of the Hack computer's memory,
 * including RAM and memory-mapped I/O. 
 * The chip facilitates read and write operations, as follows:
 *     Read:  out(t) = Memory[address(t)](t)
 *     Write: if load(t-1) then Memory[address(t-1)](t) = in(t-1)
 * In words: the chip always outputs the value stored at the memory 
 * location specified by address. If load==1, the in value is loaded 
 * into the memory location specified by address. This value becomes 
 * available through the out output from the next time step onward.
 * Address space rules:
 * Only the upper 16K+8K+1 words of the Memory chip are used. 
 * Access to address>0x6000 is invalid. Access to any address in 
 * the range 0x4000-0x5FFF results in accessing the screen memory 
 * map. Access to address 0x6000 results in accessing the keyboard 
 * memory map. The behavior in these addresses is described in the 
 * Screen and Keyboard chip specifications given in the book.
 */

CHIP Memory {
    IN in[16], load, address[15];
    OUT out[16];

    PARTS:

    // if 14 bit is zero gotto first
    Not(in=address[14], out=rmsb);

    // if address[14] and not address[13]
    Not(in=address[13], out=rprevmsb);
    And(a=address[14], b=rprevmsb, out=screen);

    // if address[14] and address[13]
    And(a=address[14], b=address[13], out=max);

    And(a=load, b=rmsb,   out=l1);
    And(a=load, b=screen, out=l2);
    And(a=load, b=max,    out=l3);

    RAM16K(in=in,   load=l1, address=address[0..13], out=oram);
    Screen(in=in,   load=l2, address=address[0..12], out=oscreen);
    Register(in=in, load=l3, 						 out=okeyboard);

    Mux8Way16(b=oram,c=oscreen,d=okeyboard,
    	sel[0]=rmsb, sel[1]=screen, sel[2]=max,
    	out=out);
}